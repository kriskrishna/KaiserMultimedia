package org.kp.wpp.portlet.search.utils;
import junit.framework.TestCase;
import org.kp.wpp.common.core.logging.Log;
import org.kp.wpp.common.core.logging.LogFactory;
import org.kp.wpp.portlet.search.constants.IPortletConstants;
public class SearchStringValidatorTest extends TestCase{
	public final static Log LOGGER = LogFactory.getLog(SearchStringValidatorTest.class);
	
	public void testHCOSearchStringValidator()
	{
		String searchQuery = null;
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "*";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "$$$$$$$$$$$";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "((((((((";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "&&&&&&&&7";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "+++++++++";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = ")))))))";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "---------";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "%%%%";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "heal%3a;&nbsp;";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "asthma";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "\"asthma\"";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "asth99ma";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "$pregnancy";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "?pregnancy";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "\"asth99ma\"";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "100175";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "colds and flu";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "colds or flu";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "colds not flu";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "\"pregnancy or\"";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "\"Heart health\"";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "\"cold\"";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "'cold'";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "'cold and flu'";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "*boat";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "??egnan*y";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "'f??' OR 'b??'";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "bo?t";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "\"";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "?";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "+";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "-";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "()";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "'";
		assertEquals(false,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins !";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins #";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins %";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins $";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins ";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins <";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins =";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins >" ;
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins @";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins []";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins [";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins ]" ;
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins \"";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins ~" ;
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins ,";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins (";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins )";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins {";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Vitamins }";
		assertEquals(true,SearchStringValidator.isValidHCOSearchString(searchQuery));
		searchQuery = "Search";
		assertTrue(SearchStringValidator.isValidHCOSearchString(searchQuery));
	}
	
	public void testSiteSearchStringValidator()
	{
		String searchQuery = null;
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "*";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "$$$$$$$$$$$";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "((((((((";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "&&&&&&&&7";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "+++++++++";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = ")))))))";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "---------";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "%%%%";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "heal%3a;&nbsp;";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "asthma";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "\"asthma\"";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "asth99ma";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "$pregnancy";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "?pregnancy";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "\"asth99ma\"";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "100175";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = IPortletConstants.VAL_DEFAULT_SEARCHTEXT;
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "colds and flu";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "colds or flu";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "colds not flu";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "\"pregnancy or\"";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "\"Heart health\"";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "\"cold\"";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "'cold'";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "'cold and flu'";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "*boat";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "??egnan*y";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "'f??' OR 'b??'";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "bo?t";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "\"";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "?";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "+";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "-";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "()";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "'";
		assertEquals(false,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins !";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins #";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins %";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins $";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins ";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins <";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins =";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins >" ;
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins @";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins []";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins [";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins ]" ;
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins \"";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins ~" ;
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins ,";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins (";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins )";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins {";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Vitamins }";
		assertEquals(true,SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = "Search";
		assertTrue(SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
		searchQuery = IPortletConstants.VAL_DEFAULT_SEARCHTEXT;
		assertFalse(SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_SEARCHTEXT));
	}
	
	public void testMGSearchStringValidator()
	{
		String searchQuery = IPortletConstants.VAL_DEFAULT_MGSEARCHTEXT;
		assertFalse(SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_MGSEARCHTEXT));
		searchQuery = IPortletConstants.VAL_DEFAULT_SEARCHTEXT;
		assertTrue(SearchStringValidator.isValidSearchString(searchQuery, IPortletConstants.VAL_DEFAULT_MGSEARCHTEXT));
	}

	public void testZipCodeValidator()
	{
		String zipQuery = "Vitamins";
		assertEquals(false,SearchStringValidator.isValidZipCode(zipQuery));
		zipQuery = "1234";
		assertEquals(false,SearchStringValidator.isValidZipCode(zipQuery));
		zipQuery = "123456";
		assertEquals(false,SearchStringValidator.isValidZipCode(zipQuery));
		zipQuery = "1as23";
		assertEquals(false,SearchStringValidator.isValidZipCode(zipQuery));
		zipQuery = "12345";
		assertEquals(true,SearchStringValidator.isValidZipCode(zipQuery));
	}

}
